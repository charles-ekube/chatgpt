import React, { useState, useRef, useEffect } from 'react';
import { IonIcon } from '@ionic/react';
import { playOutline, pauseOutline } from 'ionicons/icons';

interface CustomVideoPlayerProps {
    src: string;
    generatedBy?: string;
}

const CustomVideoPlayer: React.FC<CustomVideoPlayerProps> = ({ src, generatedBy }) => {
    const videoRef = useRef<HTMLVideoElement>(null);
    const [isPlaying, setIsPlaying] = useState(false);
    const [currentTime, setCurrentTime] = useState(0);
    const [duration, setDuration] = useState(0);

    useEffect(() => {
        if (videoRef.current) {
            videoRef.current.addEventListener('timeupdate', handleTimeUpdate);
            videoRef.current.addEventListener('loadedmetadata', handleLoadedMetadata);
        }
        return () => {
            if (videoRef.current) {
                videoRef.current.removeEventListener('timeupdate', handleTimeUpdate);
                videoRef.current.removeEventListener('loadedmetadata', handleLoadedMetadata);
            }
        };
    }, []);

    const handleTimeUpdate = () => {
        if (videoRef.current) {
            setCurrentTime(videoRef.current.currentTime);
        }
    };

    const handleLoadedMetadata = () => {
        if (videoRef.current) {
            setDuration(videoRef.current.duration);
        }
    };

    const togglePlay = () => {
        if (videoRef.current) {
            if (isPlaying) {
                videoRef.current.pause();
            } else {
                videoRef.current.play();
            }
            setIsPlaying(!isPlaying);
        }
    };

    const formatTime = (time: number) => {
        const minutes = Math.floor(time / 60);
        const seconds = Math.floor(time % 60);
        return `${minutes}:${seconds.toString().padStart(2, '0')}`;
    };

    const handleProgressClick = (e: React.MouseEvent<HTMLDivElement>) => {
        const progressBar = e.currentTarget;
        const rect = progressBar.getBoundingClientRect();
        const pos = (e.clientX - rect.left) / rect.width;
        if (videoRef.current) {
            videoRef.current.currentTime = pos * duration;
        }
    };

    return (
        <div style={{ width: '100%', position: 'relative' }}>
            <video
                ref={videoRef}
                src={src}
                style={{
                    width: '100%',
                    height: '334px',
                    objectFit: 'contain',
                    backgroundColor: '#000'
                }}
                onClick={togglePlay}
            />

            {/* Generated by text */}
            {generatedBy && (
                <div style={{
                    margin: '10px 0',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px',
                    color: '#666'
                }}>
                    <span style={{ fontSize: '14px', color: '#999' }}>Generated by â€¢</span>
                    <span style={{
                        backgroundColor: '#f5f5f5',
                        padding: '4px 12px',
                        borderRadius: '16px',
                        fontSize: '14px'
                    }}>
                        {generatedBy}
                    </span>
                </div>
            )}

            {/* Custom controls */}
            <div style={{
                display: 'flex',
                alignItems: 'center',
                gap: '12px',
                padding: '10px 0'
            }}>
                <button
                    onClick={togglePlay}
                    style={{
                        background: 'none',
                        border: 'none',
                        cursor: 'pointer',
                        padding: '0'
                    }}
                >
                    <IonIcon
                        icon={isPlaying ? pauseOutline : playOutline}
                        style={{ fontSize: '24px', color: '#000' }}
                    />
                </button>

                {/* Progress bar */}
                <div
                    onClick={handleProgressClick}
                    style={{
                        flex: 1,
                        height: '4px',
                        backgroundColor: '#E0E0E0',
                        borderRadius: '2px',
                        cursor: 'pointer',
                        position: 'relative'
                    }}
                >
                    <div
                        style={{
                            width: `${(currentTime / duration) * 100}%`,
                            height: '100%',
                            backgroundColor: '#0052CC',
                            borderRadius: '2px'
                        }}
                    />
                </div>

                {/* Duration */}
                <span style={{
                    fontSize: '14px',
                    color: '#666',
                    minWidth: '45px'
                }}>
                    {formatTime(duration)}
                </span>
            </div>
        </div>
    );
};

export default CustomVideoPlayer;